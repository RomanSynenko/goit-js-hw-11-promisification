{"version":3,"sources":["webpack:///./js/first.js","webpack:///./js/third.js","webpack:///./js/second.js","webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":"4EAAA,MAAMA,EAASC,GACJ,IAAIC,QAAQC,IACfC,WAAW,KACPD,EAAQF,IACTA,KAGLI,EAASC,GAAQC,QAAQC,IAAK,kBAAiBF,OAErDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,I,mBCXjB,MAIMK,EAAmBC,IACrB,MAAMX,GALyBY,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAMpC,OAAO,IAAIX,QAAQ,CAACC,EAASc,KACzBb,WAAW,KACYU,KAAKE,SAAW,GACtBb,EAAQ,CAAEe,GAAIP,EAAYO,GAAIZ,KAAMN,IAAWiB,EAAON,EAAYO,KAChFlB,MAGLmB,EAAa,EAAGD,KAAIZ,WACtBC,QAAQC,IAAK,eAAcU,kBAAmBZ,SAE5Cc,EAAWF,IACbX,QAAQc,KAAM,gCAA+BH,+BAEjDR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7Bb,KAAKU,GACLI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7Bb,KAAKU,GACLI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC7Bb,KAAKU,GACLI,MAAMH,GAEXV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC7Bb,KAAKU,GACLI,MAAMH,I,0CCjCX,MAAMI,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,IACxB,IAAI3B,QACNC,IAIGA,EAHqByB,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAIE,EAAML,QAASK,EAAKL,QAAWK,MAMtE1B,EAAS2B,GAAgBzB,QAAQ0B,MAAMD,GAI7CL,EAAgBH,EAAO,SAASf,KAAKJ,GACrCsB,EAAgBH,EAAO,OAAOf,KAAKJ,I,kCCtBnC,iD","file":"main.9f77f187c5bcefbc221a.js","sourcesContent":["const delay = (ms) => {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(ms)\n        }, ms)\n    })\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            canProcess ? resolve({ id: transaction.id, time: delay }) : reject(transaction.id);\n        }, delay)\n    })\n};\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time} ms`);\n};\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise(\n        (resolve) => {\n            const updatedUsers = allUsers.map(user =>\n                user.name === userName ? {...user, active: !user.active } : user\n            );\n            resolve(updatedUsers);\n        }\n    );\n};\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","import './style/styles.css';\nimport './js/first';\nimport './js/second';\nimport './js/third';"],"sourceRoot":""}